<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.springlec.base.dao.admin.UserDao">

	<!-- 유저관련 모든 정보 불러오기 : admin_searchusers.do -->
	<select id="searchUser"
		resultType="com.springlec.base.model.admin.UserDto">
		SELECT 
			u.*, 
			IFNULL(SUM(m.price), 0) AS totalbuying
		FROM user u
		LEFT JOIN orders o ON u.userid = o.userid
		LEFT JOIN product p ON o.pcode = p.pcode
		LEFT JOIN manage m ON p.pcode = m.pcode
		GROUP BY u.userid
	</select>

	<!-- 남녀 성비 정보 불러오기 : admin_graphusers.do -->
	<select id="searchGender"
		resultType="com.springlec.base.model.admin.UserDto">
		SELECT 
			gender, 
			COUNT(*) AS count
		FROM user
		WHERE invalidate = 1
		GROUP BY gender
	</select>

	<!-- 연령대 별 가입자 불러오기 : admin_graphusers.do -->
	<select id="searchAge"
		resultType="com.springlec.base.model.admin.UserDto">
		SELECT 
			age_ranges.age_group, 
			IFNULL(COUNT(user.userid), 0) AS count
		FROM (
		SELECT '20대 미만' AS age_group
		UNION ALL SELECT '20대'
		UNION ALL SELECT
		'30대'
		UNION ALL SELECT '40대'
		UNION ALL SELECT '50대'
		UNION ALL SELECT '60대
		이상'
		) AS age_ranges
		LEFT JOIN user ON CASE
		WHEN age_ranges.age_group = '20대 미만' THEN
		TIMESTAMPDIFF(YEAR, user.birthdate, CURDATE()) &lt; 20
		WHEN
		age_ranges.age_group = '20대' THEN TIMESTAMPDIFF(YEAR, user.birthdate,
		CURDATE()) BETWEEN 20 AND 29
		WHEN age_ranges.age_group = '30대' THEN
		TIMESTAMPDIFF(YEAR, user.birthdate, CURDATE()) BETWEEN 30 AND 39
		WHEN
		age_ranges.age_group = '40대' THEN TIMESTAMPDIFF(YEAR, user.birthdate,
		CURDATE()) BETWEEN 40 AND 49
		WHEN age_ranges.age_group = '50대' THEN
		TIMESTAMPDIFF(YEAR, user.birthdate, CURDATE()) BETWEEN 50 AND 59
		ELSE
		TIMESTAMPDIFF(YEAR, user.birthdate, CURDATE()) &gt;= 60
		END
		WHERE invalidate = 1
		GROUP BY age_ranges.age_group
		ORDER BY count DESC
	</select>

	<!-- 유저의 가입자 추이 불러오기 : admin_graphusers.do -->
	<select id="searchInsertdate"
		resultType="com.springlec.base.model.admin.UserDto">
		SELECT 
    		dates.date, 
   		COALESCE(counts.count, 0) AS count
		FROM (
    	SELECT DATE(DATE_SUB(CURDATE(), INTERVAL (n.num) DAY)) AS date
    	FROM (
        	SELECT 0 AS num UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3 UNION ALL
        	SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6
    	) AS n
		) AS dates
		LEFT JOIN (
    	SELECT DATE(insertdate) AS date, COUNT(*) AS count
    	FROM user
    	WHERE insertdate >= DATE_SUB(CURDATE(), INTERVAL 1 WEEK)
    	GROUP BY DATE(insertdate)
		) AS counts ON dates.date = counts.date
		ORDER BY dates.date

	</select>
</mapper>
